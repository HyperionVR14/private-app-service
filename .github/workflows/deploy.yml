name: Deploy Infra (Terraform)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  TF_IN_AUTOMATION: true
  # Backend (твоята конфигурация)
  BACKEND_RG: RG-Lab
  BACKEND_SA: kristiyansterraform
  BACKEND_CONTAINER: private-app
  BACKEND_KEY: terraform.private-app

concurrency:
  group: terraform-infra
  cancel-in-progress: false

jobs:
  infra:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .   # ← смени на "." ако .tf са в корена
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (Service Principal)
        uses: azure/login@v2
        with:
          creds: >-
            {"clientId":"${{ secrets.ARM_CLIENT_ID }}",
             "clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}",
             "subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}",
             "tenantId":"${{ secrets.ARM_TENANT_ID }}"}

      - name: Azure CLI Preflight (SA reachable + RBAC + lease check)
        shell: bash
        run: |
          set -euo pipefail
          SA="${BACKEND_SA}"
          RG="${BACKEND_RG}"
          CONT="${BACKEND_CONTAINER}"
          KEY="${BACKEND_KEY}"

          echo "== Management-plane read on SA =="
          az storage account show -g "$RG" -n "$SA" 1>/dev/null

          echo "== Public network access check =="
          PNA=$(az storage account show -g "$RG" -n "$SA" --query "publicNetworkAccess" -o tsv)
          if [ "$PNA" != "Enabled" ]; then
            echo "ERROR: Storage Account publicNetworkAccess=$PNA. GitHub runners няма да стигнат SA-то."
            exit 1
          fi

          echo "== Data-plane AAD access (container list) =="
          az storage container list --account-name "$SA" --auth-mode login 1>/dev/null \
            || { echo "ERROR: Нямаш Data-plane AAD достъп (Storage Blob Data Contributor) върху SA-то."; exit 1; }

          echo "== RBAC sanity (Reader + Storage Blob Data Contributor) =="
          # SP ObjectId
          SP_OID=$(az ad sp show --id "${{ secrets.ARM_CLIENT_ID }}" --query id -o tsv)
          SCOPE="/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/$RG/providers/Microsoft.Storage/storageAccounts/$SA"
          ROLES=$(az role assignment list --assignee "$SP_OID" --scope "$SCOPE" --query "[].roleDefinitionName" -o tsv | tr '\n' ',')

          echo "Current roles: $ROLES"
          echo "$ROLES" | grep -qi "Reader" || {
            echo "WARN: Няма 'Reader' на SA → добави го (минималното за mgmt-plane read)."; }
          echo "$ROLES" | grep -qi "Storage Blob Data Contributor" || {
            echo "ERROR: Няма 'Storage Blob Data Contributor' на SA → backend няма да взима lease."; exit 1; }

          echo "== Break stale lease if present =="
          if az storage blob show --account-name "$SA" --container-name "$CONT" --name "$KEY" --auth-mode login >/dev/null 2>&1; then
            lease_state=$(az storage blob show --account-name "$SA" --container-name "$CONT" --name "$KEY" --auth-mode login --query 'properties.lease.state' -o tsv)
            if [ "$lease_state" = "leased" ]; then
              az storage blob lease break --account-name "$SA" --container-name "$CONT" --blob-name "$KEY" --auth-mode login 1>/dev/null
              echo "Lease broken."
            else
              echo "No active lease."
            fi
          else
            echo "State blob does not exist yet. OK."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Бърза валидация без backend (никога не "виси")
      - name: Terraform Init (backend=false) for validate
        run: terraform init -backend=false -reconfigure

      - name: Terraform Validate
        run: terraform validate -no-color

      # Истински init към remote backend с AAD
      - name: Terraform Init (remote backend)
        run: |
          terraform init -reconfigure \
            -backend-config="resource_group_name=${BACKEND_RG}" \
            -backend-config="storage_account_name=${BACKEND_SA}" \
            -backend-config="container_name=${BACKEND_CONTAINER}" \
            -backend-config="key=${BACKEND_KEY}" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform Plan
        run: terraform plan -no-color -lock-timeout=5m -out=tfplan

      - name: Terraform Apply (main only)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -lock-timeout=5m tfplan