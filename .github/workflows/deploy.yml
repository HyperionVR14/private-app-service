name: Deploy Infra (Terraform)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false    # без интерактивни въпроси
  # Backend (твоята конфигурация)
  BACKEND_RG: RG-Lab
  BACKEND_SA: kristiyansterraform
  BACKEND_CONTAINER: private-app
  BACKEND_KEY: terraform.private-app
  SITE_DIR: sample-site

concurrency:
  group: terraform-infra
  cancel-in-progress: false

jobs:
  infra:
    runs-on: ubuntu-latest
    outputs:
      rg:   ${{ steps.tf_out.outputs.resource_group }}
      app:  ${{ steps.tf_out.outputs.webapp_name }}
      vnet: ${{ steps.tf_out.outputs.vnet_name }}
      snet: ${{ steps.tf_out.outputs.snet_test_name }}
      fqdn: ${{ steps.tf_out.outputs.webapp_private_fqdn }}
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (Service Principal)
        uses: azure/login@v2
        with:
          creds: >-
            {"clientId":"${{ secrets.ARM_CLIENT_ID }}",
             "clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}",
             "subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}",
             "tenantId":"${{ secrets.ARM_TENANT_ID }}"}

      - name: Azure CLI Preflight (SA reachable + RBAC + lease check)
        shell: bash
        run: |
          set -euo pipefail
          SA="${BACKEND_SA}"
          RG="${BACKEND_RG}"
          CONT="${BACKEND_CONTAINER}"
          KEY="${BACKEND_KEY}"

          echo "== Management-plane read on SA =="
          az storage account show -g "$RG" -n "$SA" 1>/dev/null

          echo "== Public network access check =="
          PNA=$(az storage account show -g "$RG" -n "$SA" --query "publicNetworkAccess" -o tsv)
          if [ "$PNA" != "Enabled" ]; then
            echo "ERROR: Storage Account publicNetworkAccess=$PNA. GitHub runners няма да стигнат SA-то."
            exit 1
          fi

          echo "== Data-plane AAD access (container list) =="
          az storage container list --account-name "$SA" --auth-mode login 1>/dev/null \
            || { echo "ERROR: Нямаш Data-plane AAD достъп (Storage Blob Data Contributor) върху SA-то."; exit 1; }

          echo "== RBAC sanity (Reader + Storage Blob Data Contributor) =="
          # SP ObjectId
          SP_OID=$(az ad sp show --id "${{ secrets.ARM_CLIENT_ID }}" --query id -o tsv)
          SCOPE="/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/$RG/providers/Microsoft.Storage/storageAccounts/$SA"
          ROLES=$(az role assignment list --assignee "$SP_OID" --scope "$SCOPE" --query "[].roleDefinitionName" -o tsv | tr '\n' ',')

          echo "Current roles: $ROLES"
          echo "$ROLES" | grep -qi "Reader" || {
            echo "WARN: Няма 'Reader' на SA → добави го (минималното за mgmt-plane read)."; }
          echo "$ROLES" | grep -qi "Storage Blob Data Contributor" || {
            echo "ERROR: Няма 'Storage Blob Data Contributor' на SA → backend няма да взима lease."; exit 1; }

          echo "== Break stale lease if present =="
          if az storage blob show --account-name "$SA" --container-name "$CONT" --name "$KEY" --auth-mode login >/dev/null 2>&1; then
            lease_state=$(az storage blob show --account-name "$SA" --container-name "$CONT" --name "$KEY" --auth-mode login --query 'properties.lease.state' -o tsv)
            if [ "$lease_state" = "leased" ]; then
              az storage blob lease break --account-name "$SA" --container-name "$CONT" --blob-name "$KEY" --auth-mode login 1>/dev/null
              echo "Lease broken."
            else
              echo "No active lease."
            fi
          else
            echo "State blob does not exist yet. OK."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Бърза валидация без backend (никога не "виси")
      - name: Terraform Init (backend=false) for validate
        run: terraform init -backend=false -reconfigure

      - name: Terraform Validate
        run: terraform validate -no-color

      # Истински init към remote backend с AAD
      - name: Terraform Init (remote backend)
        run: |
          terraform init -reconfigure \
            -backend-config="resource_group_name=${BACKEND_RG}" \
            -backend-config="storage_account_name=${BACKEND_SA}" \
            -backend-config="container_name=${BACKEND_CONTAINER}" \
            -backend-config="key=${BACKEND_KEY}" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform Plan
        run: |
          terraform plan -no-color -input=false -lock-timeout=5m \
             -var-file="terraform.tfvars" -out=tfplan

      - name: Terraform Apply (main only)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -lock-timeout=5m tfplan

      - name: Export Terraform outputs (JSON -> step outputs)
        id: tf_out
        run: |
          set -euo pipefail
          terraform output -json | tee tf_outputs.json
          # ще създаде step outputs със същите имена като в Terraform
          jq -r 'to_entries[] | "\(.key)=\(.value.value)"' tf_outputs.json >> "$GITHUB_OUTPUT"

  app:
    needs: infra
    runs-on: ubuntu-latest
    env:
      RG:   ${{ needs.infra.outputs.rg }}
      APP:  ${{ needs.infra.outputs.app }}
      VNET: ${{ needs.infra.outputs.vnet }}
      SNET: ${{ needs.infra.outputs.snet }}
      FQDN: ${{ needs.infra.outputs.fqdn }}    
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (SP)
        uses: azure/login@v2
        with:
          creds: >-
            {"clientId":"${{ secrets.ARM_CLIENT_ID }}",
             "clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}",
             "subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}",
             "tenantId":"${{ secrets.ARM_TENANT_ID }}"}

      - name: Open SCM temporarily (idempotent)
        shell: bash
        env:
          RG: rg-vpapp-dev
          APP: vpapp-web
          SITE_DIR: sample-site	
        run: |
          set -euo pipefail
          az webapp config access-restriction remove -g "$RG" -n "$APP" \
            --scm-site true --rule-name AllowAllForDeploy || true
          az webapp config access-restriction add -g "$RG" -n "$APP" \
            --scm-site true --rule-name AllowAllForDeploy --priority 100 --action Allow \
            --ip-address 0.0.0.0/0
          # Нужни са няколко секунди да се приложи правилото
          sleep 10
      
      - name: Build ZIP (robust; relative paths only)
        shell: bash
        env:
          # Ако знаеш папката — задай я БЕЗ водещ '/', напр. my-html-app
          SITE_DIR: sample-site
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
      
          # 1) Нормализирай SITE_DIR (махни водещ '/')
          SITE="${SITE_DIR:-}"
          SITE="${SITE#/}"
      
          # 2) Кандидати за автодетект
          CANDS=()
          [ -n "$SITE" ] && CANDS+=("$SITE")
          CANDS+=("site" "my-html-app" "wwwroot" "webapp" "public" "dist" "build" ".")
      
          echo "Repo root: $ROOT"
          (set +e; echo "Tree snapshot:"; ls -la; find . -maxdepth 2 -type d | sort; set -e)
      
          # 3) Намери папка с уеб съдържание
          FOUND=""
          for d in "${CANDS[@]}"; do
            if [ -d "$d" ]; then
              if ls "$d" | grep -qiE 'index\.html|hostingstart\.html|web\.config|package\.json|pom\.xml|\.csproj$'; then
                FOUND="$d"
                break
              fi
            fi
          done
      
          if [ -z "$FOUND" ]; then
            echo "ERROR: Не намерих сайт директория. Сетни env: SITE_DIR: <relative-path> към папката с index.html."
            exit 1
          fi
      
          echo "Using SITE_DIR=$FOUND"
          (cd "$FOUND" && zip -r "$ROOT/site.zip" .)
          ls -lh "$ROOT/site.zip"
      
      - name: Deploy ZIP to App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: vpapp-web
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: site.zip
      
      - name: Close SCM rule
        if: always()
        shell: bash
        env:
          RG: rg-vpapp-dev
          APP: vpapp-web
        run: |
          az webapp config access-restriction remove -g "$RG" -n "$APP" \
            --scm-site true --rule-name AllowAllForDeploy || true

      - name: Export Terraform outputs (JSON -> step outputs)
        id: tf_out
        run: |
          set -euo pipefail
          terraform output -json | tee tf_outputs.json
          jq -r 'to_entries[] | "\(.key)=\(.value.value)"' tf_outputs.json >> "$GITHUB_OUTPUT"
      
  smoke:
    needs: [infra]
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login (SP)
        uses: azure/login@v2
        with:
          creds: >-
            {"clientId":"${{ secrets.ARM_CLIENT_ID }}",
             "clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}",
             "subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}",
             "tenantId":"${{ secrets.ARM_TENANT_ID }}"}
      # Guard: виждаме стойностите, фейлваме ако някоя е празна
      - name: Guard & echo outputs
        shell: bash
        run: |
          set -euo pipefail
          RG="${{ needs.infra.outputs.rg }}"
          APP="${{ needs.infra.outputs.app }}"
          VNET="${{ needs.infra.outputs.vnet }}"
          SNET="${{ needs.infra.outputs.snet }}"
          FQDN="${{ needs.infra.outputs.fqdn }}"
          echo "RG=$RG"; echo "APP=$APP"; echo "VNET=$VNET"; echo "SNET=$SNET"; echo "FQDN=$FQDN"
          [[ -n "$RG" && -n "$APP" && -n "$VNET" && -n "$SNET" && -n "$FQDN" ]] || { echo "Missing job outputs"; exit 1; }

      - name: Private smoke test via ephemeral VM (no public IP)
        id: smoke
        shell: bash
        run: |
          set -euo pipefail
          RG="${{ needs.infra.outputs.rg }}"
          VNET="${{ needs.infra.outputs.vnet }}"
          SNET="${{ needs.infra.outputs.snet }}"
          FQDN="${{ needs.infra.outputs.fqdn }}"
          VM="smoke-$(date +%s)"

          echo "Creating VM $VM in $RG/$VNET/$SNET (no public IP)..."
          az vm create -g "$RG" -n "$VM" \
            --image Ubuntu2204 \
            --size Standard_B1s \
            --vnet-name "$VNET" --subnet "$SNET" \
            --public-ip-address "" \
            --admin-username azureuser \
            --generate-ssh-keys 1>/dev/null

          echo "Running curl against https://$FQDN ..."
          az vm run-command invoke -g "$RG" -n "$VM" \
            --command-id RunShellScript \
            --scripts "code=\$(curl -sk -o /dev/null -w '%{http_code}' https://$FQDN/); echo code=\$code; if [ \"\$code\" -ge 200 -a \"\$code\" -lt 400 ]; then exit 0; else exit 1; fi"

      - name: Cleanup smoke VM + NIC + disk
        if: always()
        shell: bash
        run: |
          RG="${{ needs.infra.outputs.rg }}"
          # delete VM
          for vm in $(az vm list -g "$RG" --query "[?starts_with(name, 'smoke-')].name" -o tsv); do
            az vm delete -g "$RG" -n "$vm" --yes --force-deletion true || true
          done
          # delete NIC(s)
          for nic in $(az network nic list -g "$RG" --query "[?starts_with(name, 'smoke-')].name" -o tsv); do
            az network nic delete -g "$RG" -n "$nic" || true
          done
          # delete disk(s)
          for disk in $(az disk list -g "$RG" --query "[?starts_with(name, 'smoke-')].name" -o tsv); do
            az disk delete -g "$RG" -n "$disk" --yes || true
          done

